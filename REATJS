return <React.Fragment> <tr key="first"><td>First</td></tr>,<tr key="second"><td>Second</td></tr></React.Fragment>

JSX that embeds raw HTML templates inside JavaScript code. JSX code by itself cannot be read by the browser; it must be transpiled into traditional 

JavaScript using tools like Babel and webpack.

performance (Virtual dom and only given component or its part is render)
codeâ€™s readability increases
writing UI test cases become extremely easy
Easy to learn.

Props => Properties, immutable, passed down to child

States => data sources, states are the objects which determine components rendering and behavior, this.state(), Mutatble, {this.setState({name:'sam'})}

	
Phases =>
	Mounting -> constructor, getDerivedStateFromProps, render,componentDidMount, 
	Update -> componentWillReceiveProps, getDerivedStateFromProps, shouldComponentUpdate, getSnapshotBeforeUpdate, componentDidUpdate
	Unmount -> componentWillUnmount
	Error Handling -> componentDidCatch(error, info)

Events => <div onClick={this.show}>Click Me!</div>  show(evt) {    // code     },   

Refs => References => Updaing infor, passing info, warppering components, third party DOM libraries etc

FOrm Submit => <form onSubmit={this.handleSubmit}>
		handleSubmit(event) {    alert('A name was submitted: ' + this.state.value);    event.preventDefault(); }


Uncontrolled Components 	=> CHild Components controllered by parent. Takes values from parent, doesnt ahve thr own state.
Higher Order Components(HOC) 	=> Resuability, Apstraction. Passing information to function to extandt the usability of it.
Pure Components => Fast has only render() but only updates when props are chnage [string equal and ref are checkied. DNt just add insert element in array]
React.memo 	=> The same as the previous one but it works with functional components.	
Render props 	=>  when a component takes a function that returns a React element and calls it instead of implementing its own render logic.
Context 	=> Passing data from Parent to CHild
useState & useEffect => Hook lets you perform side effects in function components.
			const [count, setCount] = useState(0); and 
			useEffect(() => {     // Update the document title using the browser API
				    document.title = `You clicked ${count} times`;  });

keys => Keys are used for identifying unique Virtual DOM Elements with their corresponding data driving the UI




Testing
	Jest (15.8) and Enzyme (2.8)
		describe("LifeLine Component",()=>{
    
		it("should render a loading state if there is no status",()=>{
        
			const lifeline = shallow(<LifeLine visible={true}/>);
        
		expect(lifeline.find('.life-line-bar').hasClass('ll-loading')
 )
		.toEqual(true);
    });  expect(context.state).toEqual(expectedState);  hassCLass()

	faker
	Shallow

BUILD-
	babel => (core,preset-env,preset-react,loader)  convert E5 and E6 JSX standards to browser specific js
	webpack=>Webpack is most widely used and an accepted module bundler and task runner throughout React.js community.
		webpack, webpack-cli, webpack-dev-server, html-webpack-plugin
	
